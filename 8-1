#include <iostream>
#include <cstring>
#include <list>
using namespace std;

class Employee{
private:
    char name[100];
public:
    Employee(char *name)
    {
        strcpy(this->name,name);
    }
    void ShowYourName() const
    {
        cout<<"name: "<<name<<endl;
    }
    virtual int GetPay() const =0;
    virtual void ShowSalaryInfo() const =0;
};
class PermanentWorker : public Employee
{
  //생략
};
class TemporaryWorker : public Employee
{
    //생략
};
class SalesWorker : public PermanentWorker
{
    //생략
};
namespace  RISK_LEVEL
{
enum{RISK_A=30,RISK_B=20,RISK_C=10};
}
class ForeignSalesWorker : public SalesWorker
{
private:
    const int riskLevel;
public:
    ForeignSalesWorker(char *name,int money,double ratio,int risk)
        :SalesWorker(name,money,ratio),riskLevel(risk)
    {}
    int GetRiskPay() const
    {
        return (int)(SalesWorker::GetPay() * (riskLevel/100.0));
    }
    int GetPay() const
    {
        return SalesWorker::GetPay() + GetRiskPay();
    }
    void ShowSalaryInfo() const{
        ShowYourName();
        cout<<"salay: "<<SalesWorker::GetPay()<<endl;
        cout<<"risk pay: "<<GetRiskPay()<<endl;
        cout<<"sum: "<<GetPay()<<endl<<endl;
    }
};
class EmployeeHandler
{
    //생략
};

int main(void)
{
    EmployeeHandler handler;
    
    ForeignSalesWorker * fseller1=new ForeignSalesWorker("Hong",1000,0.1,RISK_LEVEL::RISK_A);
    fseller1->AddSalesResult(7000);
    handler.AddEmployee(fseller1);
    
    ForeignSalesWorker * fseller2=new ForeignSalesWorker("Yoon",1000,0.1,RISK_LEVEL::RISK_B);
    fseller2->AddSalesResult(7000);
    handler.AddEmployee(fseller2);
    
    ForeignSalesWorker * fseller3=new ForeignSalesWorker("LEE",1000,0.1,RISK_LEVEL::RISK_C);
    fseller3->AddSalesResult(7000);
    handler.AddEmployee(fseller3);
    
    handler.ShowAllSalaryInfo();
    return 0;
}
